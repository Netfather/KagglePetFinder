# -*- coding: utf-8 -*-#
# -------------------------------------------------------------------------------
# Name:         try
# Description:  
# Author:       Administrator
# Date:         2021/11/3
# -------------------------------------------------------------------------------
import os
# os.environ['CUDA_VISIBLE_DEVICES'] = '0,1,2'
import timm


# swin_large_patch4_window7_224   2e-5
# timm.models.swin_base_patch4_window7_224_in22k(pretrained= False)
# timm.models.swin_large_patch4_window12_384_in22k(pretrained= True)
# timm.models.swin_base_patch4_window12_384_in22k(pretrained= True)
# timm.models.swin_large_patch4_window7_224_in22k(pretrained= True)
# timm.models.swin_base_patch4_window7_224_in22k(pretrained= True)
# model = timm.models.swin_large_patch4_window12_384(pretrained= True)
# model =  timm.create_model("swin_large_patch4_window12_384", pretrained=False, num_classes=1)
# model = timm.models.swin_large_patch4_window7_224(pretrained= False)
# print(model)
# import pandas as pd
# import numpy as np
#

# total_df = pd.read_csv('../data/train.csv')
#
# dense_features = [
#         'Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',
#         'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur'
#     ]
#
# a = np.ones(shape = [len(total_df),20])
# b = np.array(total_df[dense_features].values)
# print(b.shape)

#
# print(a.shape)
# print((a.min(axis= 1).mean()))
#
# for i in range(0,10):
#     print(i)

####################################################################################################
# import numpy as np
# test_array = np.array( [[21.340714, 20.825642, 20.552721, 20.24892, 19.773094, 19.492807, 19.185394, 18.967354, 18.781954, 18.51712, 18.330376, 18.166557, 18.195, 18.217354, 18.071331, 18.206959, 18.110634, 18.071602, 18.100672, 17.847965, 17.71018, 17.836946, 17.616404, 17.69724, 17.792171, 17.761377, 17.621212, 17.551426, 17.50541, 17.442719, 17.502419, 17.44661, 17.536581, 17.605318, 17.489836, 17.449638, 17.494627, 17.453842, 17.468706, 17.412304, 17.506899, 17.428345, 17.38805, 17.400583, 17.387377, 17.360125, 17.488811, 17.50816, 17.44101, 17.381617, 17.416048, 17.380018, 17.39426, 17.348873, 17.381804, 17.367418, 17.332548, 17.513227, 17.357473, 17.395607, 17.354467, 17.380926, 17.37709, 17.327202, 17.31716, 17.307068, 17.313976, 17.322563, 17.331532, 17.34637, 17.377024, 17.34748, 17.349174, 17.338322, 17.334835, 17.449686, 17.365028, 17.357086, 17.336136, 17.325558, 17.31109, 17.33081, 17.313446, 17.330965, 17.329329, 17.335949, 17.333883], [21.917768, 21.1253, 20.730263, 20.540117, 20.095137, 19.849716, 19.574408, 19.28479, 19.039827, 18.867388, 18.729483, 18.614487, 18.506145, 18.29969, 18.10603, 18.201448, 17.983427, 17.939924, 17.867857, 17.883545, 17.866346, 17.740356, 17.6894, 17.656027, 17.645008, 17.613363, 17.807068, 17.643047, 17.588963, 17.562992, 17.583384, 17.63296, 17.549252, 17.643105, 17.579473, 17.489752, 17.507448, 17.528828, 17.48948, 17.464638, 17.489592, 17.484247, 17.44663, 17.432796, 17.411564, 17.437849, 17.373875, 17.404455, 17.393337, 17.375364, 17.366062, 17.496365, 17.461435, 17.44667, 17.395248, 17.382717, 17.388369, 17.427002, 17.425863, 17.377617, 17.367981, 17.318817, 17.417046, 17.319538, 17.32194, 17.393248, 17.376167, 17.329605, 17.338417, 17.338276, 17.324736, 17.322687, 17.340883, 17.361376, 17.34563, 17.352888, 17.3709, 17.366152, 17.405716, 17.362032, 17.418268, 17.361149, 17.365494, 17.35548, 17.354834, 17.334297, 17.343742], [22.015594, 20.66522, 20.298586, 19.81621, 19.527643, 19.298252, 18.984558, 18.847593, 18.667725, 18.43703, 18.309938, 18.12, 18.066751, 17.973127, 18.023634, 17.78036, 17.703186, 17.684687, 17.674675, 17.573107, 17.51497, 17.556917, 17.67878, 17.514814, 17.584717, 17.450686, 17.54287, 17.37021, 17.381084, 17.335243, 17.344133, 17.36426, 17.313541, 17.339972, 17.34912, 17.411674, 17.257788, 17.333975, 17.391623, 17.3113, 17.426136, 17.24231, 17.238457, 17.22636, 17.3015, 17.309706, 17.315004, 17.439438, 17.281431, 17.265835, 17.243044, 17.234386, 17.248816, 17.250877, 17.276358, 17.282001, 17.28156, 17.313658, 17.262861, 17.26134, 17.259197, 17.273195, 17.246082, 17.246778, 17.270803, 17.245142, 17.250816, 17.23844, 17.267733, 17.32078, 17.266836, 17.24821, 17.315649, 17.25658, 17.259941, 17.262955, 17.293087, 17.27236, 17.30206, 17.31625, 17.28053, 17.295767, 17.31128, 17.289997, 17.277723, 17.27386, 17.281326], [23.856274, 22.18634, 21.562479, 21.000214, 20.572233, 20.169556, 19.898481, 19.445284, 19.065653, 18.961601, 18.813707, 18.690296, 18.440834, 18.459116, 18.392132, 18.268623, 18.157244, 18.113344, 18.029493, 17.952711, 17.952944, 18.006844, 17.817291, 17.782572, 17.711008, 17.698547, 17.694412, 17.709051, 17.650896, 17.59495, 17.607395, 17.65686, 17.578873, 17.758968, 17.614985, 17.689734, 17.591238, 17.540976, 17.808569, 17.524673, 17.4778, 17.548178, 17.61364, 17.522463, 17.52768, 17.508986, 17.536076, 17.677551, 17.590181, 17.582123, 17.541935, 17.478048, 17.57029, 17.790188, 17.61444, 17.5263, 17.525572, 17.590887, 17.525366, 17.435194, 17.444674, 17.467628, 17.512436, 17.57761, 17.51539, 17.629942, 17.495026, 17.521357, 17.474333, 17.480108, 17.480164, 17.498901, 17.503513, 17.48938, 17.477724, 17.465649, 17.50278, 17.493782, 17.495577, 17.473648, 17.488531, 17.467745, 17.461504, 17.468563, 17.483776, 17.48521, 17.472246], [23.128971, 21.293507, 21.04458, 20.490023, 20.05386, 19.669487, 19.449663, 19.119865, 18.971508, 18.842117, 18.749468, 18.449297, 18.344702, 18.352936, 18.090273, 17.942953, 17.884405, 17.827421, 17.739914, 17.74037, 17.680676, 17.766747, 17.68156, 17.6602, 17.751875, 17.560223, 17.563656, 17.584827, 17.58207, 17.481974, 17.495573, 17.520903, 17.505623, 17.355366, 17.40544, 17.35944, 17.356796, 17.377314, 17.346096, 17.350811, 17.358034, 17.321728, 17.332663, 17.339773, 17.466524, 17.308813, 17.267057, 17.339928, 17.372766, 17.292824, 17.420977, 17.38437, 17.401575, 17.32546, 17.364843, 17.398731, 17.392155, 17.323875, 17.277472, 17.266285, 17.24457, 17.2581, 17.268097, 17.23789, 17.251657, 17.26774, 17.304424, 17.26512, 17.242605, 17.259134, 17.249115, 17.279432, 17.258593, 17.285992, 17.317205, 17.307846, 17.255001, 17.255732, 17.262962, 17.266916, 17.240822, 17.265614, 17.229462, 17.256514, 17.269361, 17.261703, 17.248034], [24.010239, 21.569056, 20.95547, 20.622326, 20.231407, 19.867855, 19.527063, 19.319078, 19.108757, 18.882326, 18.680506, 18.658077, 18.417599, 18.344645, 18.132006, 18.064148, 17.97715, 18.011494, 17.905962, 17.768559, 17.872093, 17.676409, 17.639503, 17.923185, 17.600004, 17.67379, 17.549576, 17.436556, 17.47794, 17.40842, 17.438265, 17.450571, 17.415201, 17.423445, 17.388609, 17.377275, 17.411493, 17.461676, 17.34438, 17.379307, 17.37076, 17.313904, 17.337828, 17.361052, 17.368303, 17.4626, 17.361443, 17.237373, 17.30956, 17.282108, 17.410679, 17.263538, 17.215252, 17.246433, 17.256668, 17.237286, 17.340206, 17.264877, 17.243584, 17.222467, 17.206753, 17.21428, 17.234924, 17.229807, 17.212996, 17.27236, 17.260593, 17.355385, 17.23984, 17.237957, 17.233604, 17.291372, 17.256054, 17.373459, 17.29102, 17.241909, 17.285965, 17.259005, 17.272238, 17.27298, 17.234482, 17.254303, 17.25824, 17.260086, 17.25486, 17.267336, 17.286257], [22.496803, 21.524372, 21.071108, 20.61405, 20.241636, 20.092224, 19.619902, 19.18223, 18.827915, 18.62704, 18.556543, 18.372904, 18.376493, 18.267357, 18.218859, 18.085938, 17.985683, 17.931328, 17.866829, 17.785666, 17.988956, 17.73751, 17.77208, 17.692911, 17.72054, 17.606482, 17.84067, 17.567488, 17.582994, 17.571062, 17.66198, 17.61554, 17.49168, 17.453686, 17.504324, 17.428682, 17.38789, 17.34956, 17.393919, 17.48505, 17.391533, 17.399036, 17.498026, 17.44932, 17.414896, 17.39068, 17.375702, 17.373764, 17.326412, 17.312551, 17.350296, 17.496927, 17.402699, 17.46793, 17.395369, 17.389353, 17.4575, 17.39276, 17.382814, 17.373783, 17.462667, 17.30917, 17.341951, 17.336895, 17.33757, 17.30807, 17.298832, 17.338795, 17.340342, 17.322025, 17.333067, 17.364735, 17.336954, 17.343203, 17.323881, 17.327168, 17.400112, 17.324759, 17.33678, 17.315428, 17.329115, 17.341707, 17.337439, 17.335217, 17.32996, 17.32661, 17.337847], [21.184036, 20.64804, 20.234858, 19.946022, 19.593029, 19.345287, 19.109386, 18.911077, 18.809523, 18.596714, 18.450495, 18.270332, 18.221972, 18.10807, 18.062366, 17.968718, 17.896828, 17.946175, 17.799726, 17.813942, 17.799837, 17.639235, 17.65344, 17.63764, 17.659876, 17.632135, 17.607065, 17.517708, 17.500132, 17.443739, 17.445524, 17.393286, 17.409948, 17.38348, 17.391958, 17.388102, 17.386984, 17.43103, 17.341412, 17.345943, 17.361753, 17.29892, 17.38959, 17.436821, 17.364733, 17.324547, 17.392353, 17.287167, 17.251696, 17.24773, 17.259567, 17.26719, 17.389456, 17.28586, 17.243786, 17.30561, 17.267143, 17.278955, 17.224993, 17.249077, 17.278774, 17.261969, 17.260933, 17.284523, 17.233408, 17.245665, 17.299994, 17.228209, 17.300587, 17.242685, 17.234215, 17.232767, 17.250908, 17.249231, 17.244783, 17.244368, 17.237553, 17.228416, 17.23441, 17.255821, 17.23995, 17.239824, 17.236826, 17.235094, 17.230625, 17.241415, 17.235043], [21.834858, 21.266695, 20.856688, 20.452543, 19.971275, 19.657528, 19.34723, 19.145132, 18.907448, 18.701517, 18.480911, 18.336487, 18.301348, 18.351933, 18.409908, 18.14401, 18.07051, 17.979818, 18.045023, 17.947432, 17.886873, 17.872864, 17.819103, 17.733847, 17.7705, 17.732616, 17.67523, 17.597273, 17.666595, 17.646446, 17.61502, 17.575964, 17.663996, 17.668423, 17.640585, 17.575447, 17.481134, 17.524267, 17.575516, 17.506351, 17.444939, 17.457165, 17.456757, 17.418318, 17.55396, 17.826862, 17.469435, 17.500744, 17.562733, 17.449251, 17.481314, 17.391766, 17.410978, 17.432714, 17.451635, 17.511618, 17.389376, 17.394682, 17.636978, 17.369164, 17.404066, 17.385647, 17.389204, 17.382402, 17.437614, 17.457045, 17.48931, 17.424974, 17.418314, 17.380629, 17.394165, 17.382835, 17.417847, 17.504044, 17.432919, 17.471674, 17.42375, 17.399134, 17.3909, 17.428608, 17.468674, 17.394938, 17.417906, 17.40921, 17.371342, 17.3679, 17.38065], [22.260328, 21.033693, 20.65506, 20.284306, 19.85645, 19.536621, 19.33645, 19.128231, 18.940905, 18.728212, 18.493166, 18.350073, 18.35334, 18.333675, 18.234325, 18.117144, 18.08946, 17.973328, 17.991707, 17.925848, 17.807507, 17.835226, 17.77123, 17.733982, 17.685574, 17.718733, 17.629156, 17.644463, 17.604471, 17.601063, 17.547905, 17.491446, 17.470993, 17.505682, 17.561392, 17.481468, 17.501364, 17.4573, 17.547743, 17.452852, 17.441824, 17.399298, 17.446955, 17.587074, 17.43297, 17.390339, 17.41583, 17.441305, 17.506498, 17.466362, 17.448065, 17.3945, 17.351849, 17.370533, 17.398481, 17.380074, 17.412392, 17.375853, 17.379145, 17.385698, 17.384254, 17.351799, 17.34457, 17.35481, 17.360495, 17.348494, 17.357311, 17.320166, 17.341854, 17.362793, 17.38415, 17.353031, 17.359028, 17.363022, 17.337486, 17.37356, 17.3812, 17.348125, 17.340233, 17.329937, 17.327267, 17.326292, 17.33396, 17.348902, 17.329779, 17.342407, 17.353304]]

# )
# # test_array = test_array[::,0:9]
# print(test_array.shape)
# print(test_array.min(axis= 1))

# # 删除一个最低分
# test_min_per_fold = test_array.min(axis= 1)
# test_min_per_fold = np.delete(test_min_per_fold, test_min_per_fold.argmax())
# print(test_min_per_fold)
# # 计算 总模型的 sqe 得分
# # 由于 sqe 是  y - yhat 的平方 求和 再开根号
# # 因此多模型的预测成绩 应当为
# print(test_min_per_fold.mean())


####################################################################################################
### 生成图片
# from toolbox.plot_box.plot_logger import plot_logger
# source = r"C:\Users\Administrator\Desktop\fsdownload\log"
#
# plot_logger(
#     source,
#     source + r"\log.png",
#     figure_title="train_val_lb",
#     line_down_read = 9,  # 从截断线 往下数的条目数  随 每fold 多少个 epoch 更改
#     fold_nums = 10) # 随fold 数量更改

####################################################################################################
########### 读取 fastai的 fold_history 文件
import pandas as pd
import numpy as np
metric_list = [0] * 10
for i in range(10):
    df = pd.read_csv("/storage/Kaggle_Pet_Finder/model/Swin_Tr_224/fastai_test19/fold{}_history.csv".format(i))
    # print(df.head())
    metric_list[i] = df["petfinder_rmse"].values

min_list = []
for list in metric_list:
    min_list.append(list.min())
print(min_list)
min_list = np.array(min_list)
min_list = np.delete(min_list, min_list.argmax())
print(min_list)
print("Total min values : ",min_list.mean())

